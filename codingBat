Given a string, return the count of the number of times that a substring length 2 appears in the string 
and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

public int last2(String str) {
  if(str.length() < 2) return 0;
  
  String end = str.substring(str.length()-2);
  int count = 0;
  
  for(int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);
    if(sub.equals(end)) {
      count++;
    }
  }
  return count;
}

******************************************

Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.


arrayFront9([1, 2, 9, 3, 4]) → true
arrayFront9([1, 2, 3, 4, 9]) → false
arrayFront9([1, 2, 3, 4, 5]) → false

public boolean arrayFront9(int[] nums) {
  int son = nums.length;
  if(son > 4) son=4;
  
  for(int i = 0; i<son; i++) {
    if(nums[i] == 9) return true;
  }
  return false;
}

*********************************************


Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.


array123([1, 1, 2, 3, 1]) → true
array123([1, 1, 2, 4, 1]) → false
array123([1, 1, 2, 1, 2, 3]) → true

public boolean array123(int[] nums) {
  for(int i = 0; i< nums.length-2; i++) {
    if(nums[i] == 1 && nums[i+1] == 2 && nums[i+2] == 3) return true;
  }
  return false;
}

*************************************


Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  if(a.length>0 && b.length>0) {
    if(a[0]==b[0] || a[a.length-1]==b[b.length-1])  return true;
  }
  return false;
}

********************************************


When squirrels get together for a party, they like to have cigars. A squirrel party is successful 
when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, 
in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.

public boolean cigarParty(int cigars, boolean isWeekend) {
  if (isWeekend == true && cigars >= 40) {
    return true;
} else if(!isWeekend && cigars >= 40 && cigars <= 60) {
    return true;
} else {
  return false;
}
}

**********************************************

You and your date are trying to get a table at a restaurant. The parameter "you" is the stylishness of your clothes, in the range 0..10,
and "date" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. 
If either of you is very stylish,8 or more, then the result is 2 (yes). 
With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).

public int dateFashion(int you, int date) {
  if(you<=2 || date<=2) {
    return 0;
  }else if(you>=8 || date>=8) {
    return 2;
  }else {
    return 1;
  }  
}

**********************************************

Given a string, return the count of the number of times that a substring length 2 appears in the string 
and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

public int last2(String str) {
  if(str.length() < 2) return 0;
  
  String end = str.substring(str.length()-2);
  int count = 0;
  
  for(int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);
    if(sub.equals(end)) {
      count++;
    }
  }
  return count;
}

******************************************

Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.


arrayFront9([1, 2, 9, 3, 4]) → true
arrayFront9([1, 2, 3, 4, 9]) → false
arrayFront9([1, 2, 3, 4, 5]) → false

public boolean arrayFront9(int[] nums) {
  int son = nums.length;
  if(son > 4) son=4;
  
  for(int i = 0; i<son; i++) {
    if(nums[i] == 9) return true;
  }
  return false;
}

*********************************************


Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.


array123([1, 1, 2, 3, 1]) → true
array123([1, 1, 2, 4, 1]) → false
array123([1, 1, 2, 1, 2, 3]) → true

public boolean array123(int[] nums) {
  for(int i = 0; i< nums.length-2; i++) {
    if(nums[i] == 1 && nums[i+1] == 2 && nums[i+2] == 3) return true;
  }
  return false;
}

*************************************


Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  if(a.length>0 && b.length>0) {
    if(a[0]==b[0] || a[a.length-1]==b[b.length-1])  return true;
  }
  return false;
}

********************************************


When squirrels get together for a party, they like to have cigars. A squirrel party is successful 
when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, 
in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.

public boolean cigarParty(int cigars, boolean isWeekend) {
  if (isWeekend == true && cigars >= 40) {
    return true;
} else if(!isWeekend && cigars >= 40 && cigars <= 60) {
    return true;
} else {
  return false;
}
}

**********************************************


Given a string, take the last char and return a new string with the last char added at the front and back, so "cat" yields "tcatt". The original string will be length 1 or more.


backAround("cat") → "tcatt"
backAround("Hello") → "oHelloo"
backAround("a") → "aaa"
