Given a string, return the count of the number of times that a substring length 2 appears in the string 
and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

public int last2(String str) {
  if(str.length() < 2) return 0;
  
  String end = str.substring(str.length()-2);
  int count = 0;
  
  for(int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);
    if(sub.equals(end)) {
      count++;
    }
  }
  return count;
}

******************************************

Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.


arrayFront9([1, 2, 9, 3, 4]) → true
arrayFront9([1, 2, 3, 4, 9]) → false
arrayFront9([1, 2, 3, 4, 5]) → false

public boolean arrayFront9(int[] nums) {
  int son = nums.length;
  if(son > 4) son=4;
  
  for(int i = 0; i<son; i++) {
    if(nums[i] == 9) return true;
  }
  return false;
}

*********************************************


Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.


array123([1, 1, 2, 3, 1]) → true
array123([1, 1, 2, 4, 1]) → false
array123([1, 1, 2, 1, 2, 3]) → true

public boolean array123(int[] nums) {
  for(int i = 0; i< nums.length-2; i++) {
    if(nums[i] == 1 && nums[i+1] == 2 && nums[i+2] == 3) return true;
  }
  return false;
}

*************************************


Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  if(a.length>0 && b.length>0) {
    if(a[0]==b[0] || a[a.length-1]==b[b.length-1])  return true;
  }
  return false;
}

********************************************

When squirrels get together for a party, they like to have cigars. A squirrel party is successful 
when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, 
in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.

public boolean cigarParty(int cigars, boolean isWeekend) {
  if (isWeekend == true && cigars >= 40) {
    return true;
} else if(!isWeekend && cigars >= 40 && cigars <= 60) {
    return true;
} else {
  return false;
}
}

**********************************************

You and your date are trying to get a table at a restaurant. The parameter "you" is the stylishness of your clothes, in the range 0..10,
and "date" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. 
If either of you is very stylish,8 or more, then the result is 2 (yes). 
With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).

public int dateFashion(int you, int date) {
  if(you<=2 || date<=2) {
    return 0;
  }else if(you>=8 || date>=8) {
    return 2;
  }else {
    return 1;
  }  
}

**********************************************

Given a string, return the count of the number of times that a substring length 2 appears in the string 
and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

public int last2(String str) {
  if(str.length() < 2) return 0;
  
  String end = str.substring(str.length()-2);
  int count = 0;
  
  for(int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);
    if(sub.equals(end)) {
      count++;
    }
  }
  return count;
}

******************************************

Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.


arrayFront9([1, 2, 9, 3, 4]) → true
arrayFront9([1, 2, 3, 4, 9]) → false
arrayFront9([1, 2, 3, 4, 5]) → false

public boolean arrayFront9(int[] nums) {
  int son = nums.length;
  if(son > 4) son=4;
  
  for(int i = 0; i<son; i++) {
    if(nums[i] == 9) return true;
  }
  return false;
}

*********************************************


Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.


array123([1, 1, 2, 3, 1]) → true
array123([1, 1, 2, 4, 1]) → false
array123([1, 1, 2, 1, 2, 3]) → true

public boolean array123(int[] nums) {
  for(int i = 0; i< nums.length-2; i++) {
    if(nums[i] == 1 && nums[i+1] == 2 && nums[i+2] == 3) return true;
  }
  return false;
}

*************************************


Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  if(a.length>0 && b.length>0) {
    if(a[0]==b[0] || a[a.length-1]==b[b.length-1])  return true;
  }
  return false;
}

********************************************


When squirrels get together for a party, they like to have cigars. A squirrel party is successful 
when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, 
in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.

public boolean cigarParty(int cigars, boolean isWeekend) {
  if (isWeekend == true && cigars >= 40) {
    return true;
} else if(!isWeekend && cigars >= 40 && cigars <= 60) {
    return true;
} else {
  return false;
}
}

**********************************************


Given a string, take the last char and return a new string with the last char added at the front and back, so "cat" yields "tcatt". The original string will be length 1 or more.


backAround("cat") → "tcatt"
backAround("Hello") → "oHelloo"
backAround("a") → "aaa"

public String backAround(String str) {
  String abc="";
  if(str.length()>=1) {
    abc=str.charAt(str.length()-1)+str+str.charAt(str.length()-1);
    return abc;
  }
  return str;
}

****************************************


Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring. 
So "xxcaazz" and "xxbaaz" yields 3, since the "xx", "aa", and "az" substrings appear in the same place in both strings.

public int stringMatch(String a, String b) {
  int count=0;
  int len = Math.min(a.length(), b.length());
  for(int i=0; i< len-1; i++) {
    String asy = a.substring(i,i+2);
    String bsy = b.substring(i,i+2);
      if(asy.equals(bsy)) {
        count++;
      }
  }
  return count;
}

********************************


We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return true if it is possible to make the goal by choosing from the given bricks. This is a little harder than it looks and can be done without any loops. See also: Introduction to MakeBricks


makeBricks(3, 1, 8) → true
makeBricks(3, 1, 9) → false
makeBricks(3, 2, 10) → true

public boolean makeBricks(int small, int big, int goal) {
  int digit = goal % 10;
  if(small + 5 * big < goal) return false;
  if(digit < 5 && small < digit) return false;
  else if(digit > 5 && digit > small + 5) return false;
  else return true;
}

**************************************

Given 3 int values, a b c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.


loneSum(1, 2, 3) → 6
loneSum(3, 2, 3) → 2
loneSum(3, 3, 3) → 0

public int loneSum(int a, int b, int c) {
  int sum = 0;
  if (a != b && a != c) {
    sum += a;
  }
  if (b != a && b != c) {
    sum += b;
  }
  if (c != a && c != b) {
    sum += c;
  }
  return sum;

*******************************

Given a string, return a string where for every char in the original, there are two chars.


doubleChar("The") → "TThhee"
doubleChar("AAbb") → "AAAAbbbb"
doubleChar("Hi-There") → "HHii--TThheerree"

public String doubleChar(String str) {
  String abc = "";
  for(int i =0; i <str.length(); i++) {
    abc += str.charAt(i);
    abc += str.charAt(i);
  }
  return abc;
}

*************************************

Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.


scoresIncreasing([1, 3, 4]) → true
scoresIncreasing([1, 3, 2]) → false
scoresIncreasing([1, 1, 4]) → true

public boolean scoresIncreasing(int[] scores) {
  boolean bak = false;
  for(int i = 0; i<scores.length-1; i++) {
    if(scores[i] <= scores[i+1]) {
      bak = true;
    } else {
      return false;
    }  
  }
  return bak;
}

******************************************

Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. 
Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods return the smaller or larger of two values.

public int bigDiff(int[] nums) {
  Arrays.sort(nums);
  return nums[nums.length-1] - nums[0];
}

****************************************
Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).

public int factorial(int n) {
  if(n==1) return 1;
  return n * factorial(n-1);
}
****************************************

The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. 
The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values,
so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, 
with n=0 representing the start of the sequence.

public int fibonacci(int n) {
  if(n==0) return 0;
  else if(n==1) return 1;
  return fibonacci(n-1) + fibonacci(n-2);
}
